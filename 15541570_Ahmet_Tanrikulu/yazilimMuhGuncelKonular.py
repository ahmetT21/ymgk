# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1J2YRU-3ea3CbHEG-J59HuniMEE_wyth0
"""

import numpy as np
import pandas as pd

veri=pd.read_excel("/content/drive/My Drive/guncelkonular/istanbul.csv")

from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder().fit(veri.Kalite)
labels = label_encoder.transform(veri.Kalite)
classes = list(label_encoder.classes_)

X=veri.drop(["Kalite"],axis=1)
y = labels
nb_features = 20
nb_classes = len(classes)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X= sc.fit_transform(X)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2)

from tensorflow.keras.utils import to_categorical
y_train = to_categorical(y_train)
y_test = to_categorical(y_test)


from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

model = Sequential()
model.add(Dense(2048,input_dim=91,activation="relu"))
model.add(Dense(1024,activation="relu"))
model.add(Dense(5,activation="softmax"))
model.summary()

#f1 score, kesinlik, duyarlılık, özgüllük değerlerinin hesaplanması
from keras import backend as K
def recall_m(y_true, y_pred):
    y_true = K.ones_like(y_true) 
    true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))
    all_positives = K.sum(K.round(K.clip(y_true, 0, 1)))
    
    recall = true_positives / (all_positives + K.epsilon())
    return recall

def precision_m(y_true, y_pred):
    y_true = K.ones_like(y_true) 
    true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))
    
    predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))
    precision = true_positives / (predicted_positives + K.epsilon())
    return precision

def f1_m(y_true, y_pred):
    precision = precision_m(y_true, y_pred)
    recall = recall_m(y_true, y_pred)
    return 2*((precision*recall)/(precision+recall+K.epsilon()))

def specificity_m(y_true, y_pred):
    neg_y_true = 1 - y_true
    neg_y_pred = 1 - y_pred
    fp = K.sum(neg_y_true * y_pred)
    tn = K.sum(neg_y_true * neg_y_pred)
    specificity = tn / (tn + fp + K.epsilon())
    return specificity

def sensivity_m(y_true, y_pred):
    neg_y_pred = 1 - y_pred
    y_true = K.ones_like(y_true) 
    tp = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))
    sensivity= tp/(tp + neg_y_pred + K.epsilon())
    return sensivity


from tensorflow.keras.optimizers import SGD
opt = SGD(lr=1e-3,decay=1e-5,momentum=0.9,nesterov=True)

model.compile(loss="binary_crossentropy",optimizer = opt , metrics=['acc',f1_m,precision_m, recall_m, specificity_m, sensivity_m])

score = model.fit(X_train,y_train,epochs=20,validation_data=(X_test,y_test))


#gerekli değerlerin elde edilmesi
loss, accuracy, f1_score, precision, recall, specificity, sensivity = model.evaluate(X_test, y_test, verbose=0)

#ortalama değerlerin gösterilmesi
print(("Ortalama Eğitim Kaybı: ", np.mean(model.history.history["loss"])))
print(("Ortalama Eğitim Başarımı: ", np.mean(model.history.history["acc"])))
print(("Ortalama Doğrulama Kaybı: ", np.mean(model.history.history["val_loss"])))
print(("Ortalama Doğrulama Başarımı: ", np.mean(model.history.history["val_acc"])))

print(("Ortalama F1 SKOR: ", f1_score))
print(("Ortalama Precision: ", precision))
print(("Ortalama Recall: ", recall))
print(("Ortalama Sensivity: ", specificity))
print(("Ortalama Specificity: ", sensivity))

#değerlerin ekranda gösterilmesi
import matplotlib.pyplot as plt
fig, (ax1,ax2) = plt.subplots(2,1,figsize=(15,15))
ax1.plot(model.history.history['loss'],color='g',label="Eğitim kaybı")
ax1.plot(model.history.history['val_loss'],color='y',label="Doğrulama kaybı")
ax1.set_xticks(np.arange(15,15,15))
ax2.plot(model.history.history['acc'],color='b',label="Eğitim başarımı")
ax2.plot(model.history.history['val_acc'],color='r',label="Doğrulama başarımı")
ax2.set_xticks(np.arange(15,15,15))
plt.legend()
plt.show()


plt.plot(model.history.history["f1_m"], color="y")
plt.plot(model.history.history["val_f1_m"], color="m")
plt.xlabel("Epok Sayısı")
plt.ylabel("F1 skor")
plt.legend()
plt.show()